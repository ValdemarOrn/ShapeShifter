<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpSoundDevice</name>
    </assembly>
    <members>
        <member name="T:SharpSoundDevice.PortDirection">
            <summary>
            Indicates the direction of the port.
            </summary>
        </member>
        <member name="F:SharpSoundDevice.PortDirection.Output">
            <summary>
            Designates the Port as an output port
            </summary>
        </member>
        <member name="F:SharpSoundDevice.PortDirection.Input">
            <summary>
            Designates the Port as an input port
            </summary>
        </member>
        <member name="T:SharpSoundDevice.DeviceType">
            <summary>
            Indicates the type of device.
            
            Note that DeviceType is really only needed to conform with current standards, unlike VST, 
            SharpSoundDevice allows for a device to do any or all of these things simultaneously.
            </summary>
        </member>
        <member name="F:SharpSoundDevice.DeviceType.Generator">
            <summary>
            A device, e.g. a synthesizer, that generates sound without any input signal 
            connected to it. (corresponds to VST function call "isSynth(true)" )
            </summary>
        </member>
        <member name="F:SharpSoundDevice.DeviceType.Effect">
            <summary>
            An effects device that manipulates incoming audio, processes it and streams it
            back out.
            </summary>
        </member>
        <member name="F:SharpSoundDevice.DeviceType.Midi">
            <summary>
            A Midi effect that only listens to Midi input and generates Midi output.
            Unsupported by VST bridge!
            </summary>
        </member>
        <member name="T:SharpSoundDevice.EventType">
            <summary>
            The type of event that is being signaled.
            </summary>
        </member>
        <member name="F:SharpSoundDevice.EventType.Parameter">
            <summary>
            A parameter has changed. Can be sent from Host to device to alert the device, 
            but can also be sent from device to host when a parameter is edited via the device GUI.
            </summary>
        </member>
        <member name="F:SharpSoundDevice.EventType.Midi">
            <summary>
            A midi event. Can be sent from host to device (e.g. Note/CC input) or from device to
            host if the device is a midi plugin.
            </summary>
        </member>
        <member name="F:SharpSoundDevice.EventType.ProgramChange">
            <summary>
            Send if the currentprogram has changed. Can be sent from host to device to 
            signal the device to change presets, or from  device to host when the program is changed 
            via the device GUI.
            </summary>
        </member>
        <member name="F:SharpSoundDevice.EventType.WindowSize">
            <summary>
            Alert the host that the plugin is requesting the GUI window to be resized.
            Needed because of compatibility with VST.
            </summary>
        </member>
        <member name="F:SharpSoundDevice.EventType.GuiEvent">
            <summary>
            Gui events, KeyDown, KeyUp, MouseWheel
            </summary>
        </member>
        <member name="T:SharpSoundDevice.DeviceInfo">
            <summary>
            Struct that carries required information about a device.
            The host queries these properties to gain information about the device.
            All IAudioDevice classes declare a public property of this type.
            The DeviceInfo values can not change during runtime. changing the values at runtime
            will result in undefined behaviour. A device must always return the exact same DeviceInfo.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.DeviceInfo.DeviceID">
            <summary>
            A unique ID for the device. The format is unspecified but device makers are encouraged
            to pick a good, unique ID, preferably one that contains the name of the device and the
            name of the author/manufacturer.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.DeviceInfo.VstId">
            <summary>
            The Virtual Studio Technology (VST) ID. See Steinberg documentation for more details.
            You can use DeviceUtilities.GenerateIntegerId() to create a pseudo-random ID for your 
            device.
            If you want to distribute your VST plugin you should register your unique VST Id with
            Steinberg. http://service.steinberg.de/databases/plugin.nsf/plugIn
            Note that Steinberg uses a 4-character format for their IDs. where each character
            represents one byte of an integer number.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.DeviceInfo.Name">
            <summary>
            The full name for the plugin.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.DeviceInfo.Developer">
            <summary>
            The name of the device developer.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.DeviceInfo.Version">
            <summary>
            A version number. Optional.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.DeviceInfo.Type">
            <summary>
            Indicates the type of device. 
            See DeviceType enum for more info.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.DeviceInfo.ProgramCount">
            <summary>
            Indicates how many programs are in each program bank.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.DeviceInfo.HasEditor">
            <summary>
            Indicates is the device has a custom editor (GUI).
            </summary>
        </member>
        <member name="P:SharpSoundDevice.DeviceInfo.EditorWidth">
            <summary>
            Indicates the width of the editor, in pixels.
            Needed for compatibility with VST standard, where the host is responsible for setting
            the correct size of the editor window.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.DeviceInfo.EditorHeight">
            <summary>
            Indicates the height of the editor, in pixels.
            Needed for compatibility with VST standard, where the host is responsible for setting
            the correct size of the editor window.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.DeviceInfo.UnsafeProcessing">
            <summary>
            When set to true, the host will call the unsafe ProcessSample method
            </summary>
        </member>
        <member name="T:SharpSoundDevice.Event">
            <summary>
            A structure that carrying event data from device-to-host, or host-to-device
            </summary>
        </member>
        <member name="P:SharpSoundDevice.Event.Type">
            <summary>
            Specifies the event type. 
            See EventType enum for more info.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.Event.EventIndex">
            <summary>
            Specifies the event index.
            EventType = Parameter: Specifies the parameter index that is being updated.
            EventType = Midi: Specifies the timing of the Midi event as number of samples
            	offset from the start of the current sample buffer.
            EventType = ProgramChange: The index of the newly selected program.
            EventType = WindowSize: Unused.
            EventType = GuiEvent: Unused.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.Event.Data">
            <summary>
            Contains the event data.
            EventType = Parameter: The new parameter value, type System.Double.
            EventType = Midi: byte array containing raw midi data.
            	For regular Midi data, the length of the array is 3 bytes.
            	For sysex data, the length corresponds to the number of sysex bytes sent.
            EventType = ProgramChange: Unused.
            EventType = WindowSize: Unused.
            EventType = GuiEvent: KeyEvent.
            </summary>
        </member>
        <member name="T:SharpSoundDevice.IHostInfo">
            <summary>
            Interface implemented by a plugin bridge or host to facilitate device-to-host communication.
            </summary>
        </member>
        <member name="M:SharpSoundDevice.IHostInfo.SendEvent(System.Int32,SharpSoundDevice.Event)">
            <summary>
            Method used to send events from device to host.
            See Event struct for more info.
            </summary>
            <param name="pluginSenderId">The id of the device that is sending the event.</param>
            <param name="ev">Event sent from device to host.</param>
        </member>
        <member name="P:SharpSoundDevice.IHostInfo.BPM">
            <summary>
            Returns the current BPM (beats per minute) of the host.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.IHostInfo.SamplePosition">
            <summary>
            Returns the number of samples from start position.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.IHostInfo.SampleRate">
            <summary>
            Returns the current sample rate of the host.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.IHostInfo.BlockSize">
            <summary>
            Returns the current sample buffer size of the host / audio driver.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.IHostInfo.TimeSignatureNum">
            <summary>
            Returns the current time signature numerator of the host.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.IHostInfo.TimeSignatureDen">
            <summary>
            Returns the current time signature denominator of the host.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.IHostInfo.HostVendor">
            <summary>
            Returns the host author/vendor/manufacturer (e.g. Steinberg, Ableton...).
            </summary>
        </member>
        <member name="P:SharpSoundDevice.IHostInfo.HostName">
            <summary>
            Returns the host name (e.g. Cubase, Live...).
            </summary>
        </member>
        <member name="P:SharpSoundDevice.IHostInfo.HostVersion">
            <summary>
            Returns the host version.
            </summary>
        </member>
        <member name="T:SharpSoundDevice.IAudioDevice">
            <summary>
            The public interface that is implemented by an audio device.
            A host or plugin bridge will use this interface to communicate with the plugin.
            
            IMPORTANT: All classes implementing this interface MUST implement a no-argument constructor!
            </summary>
        </member>
        <member name="M:SharpSoundDevice.IAudioDevice.InitializeDevice">
            <summary>
            Called when a new device instance is created.
            </summary>
        </member>
        <member name="M:SharpSoundDevice.IAudioDevice.DisposeDevice">
            <summary>
            Called when the device is being disposed of (removed from the host).
            </summary>
        </member>
        <member name="M:SharpSoundDevice.IAudioDevice.Start">
            <summary>
            Called before processing starts.
            Corresponds to VST AudioEffectX.resume()
            </summary>
        </member>
        <member name="M:SharpSoundDevice.IAudioDevice.Stop">
            <summary>
            Called after processing stops.
            Corresponds to VST AudioEffectX.suspend()
            </summary>
        </member>
        <member name="P:SharpSoundDevice.IAudioDevice.DeviceId">
            <summary>
            Set by the plugin bridge, globally unique identifier specifying the device instance
            </summary>
        </member>
        <member name="P:SharpSoundDevice.IAudioDevice.DeviceInfo">
            <summary>
            Struct containing information about the current device. 
            See DeviceInfo struct for more info.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.IAudioDevice.ParameterInfo">
            <summary>
            An array of parameters implemented by the device.
            See Parameter struct for more info.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.IAudioDevice.PortInfo">
            <summary>
            An array of ports (audio inputs and outputs) implemented by the device.
            See Port struct for more info.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.IAudioDevice.CurrentProgram">
            <summary>
            Gives the index of the currently selected program.
            </summary>
        </member>
        <member name="M:SharpSoundDevice.IAudioDevice.SendEvent(SharpSoundDevice.Event)">
            <summary>
            Method called by the host to send events to the device.
            See the Event struct for more information about events.
            </summary>
            <param name="ev">The event to pass into the device</param>
        </member>
        <member name="M:SharpSoundDevice.IAudioDevice.ProcessSample(System.Double[][],System.Double[][],System.UInt32)">
            <summary>
            The main processing loop. The host calls this method, supplying the input arguments.
            It is the job of the audio device to fill the output arrays with data.
            The width of the input[][] array corresponds to the total number of input channels 
            your device has.
            The width of the output[][] array corresponds to the total number of output channels 
            your device has.
            The length of each array in input[][] and output[][] is less or equal to the host's 
            BufferSize.
            </summary>
            <param name="input">
            input channel buffers. 
            Array of arrays, size double[numberOfInputs][bufferSize]
            </param>
            <param name="output">
            Output channel buffers. 
            Array of arrays, size double[numberOfOutputs][bufferSize]
            </param>
            <param name="bufferSize">the number of samples in the buffers</param>
        </member>
        <member name="M:SharpSoundDevice.IAudioDevice.ProcessSample(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Unsafe Processing method
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <param name="outChannelCount"></param>
            <param name="bufferSize"></param>
            <param name="inChannelCount"></param>
        </member>
        <member name="M:SharpSoundDevice.IAudioDevice.OpenEditor(System.IntPtr)">
            <summary>
            Called by the host when the device editor should be displayed.
            </summary>
            <param name="parentWindow">
            IntPtr indicating the parent window to dock the editor. Used because of VST 
            compatibility. This call should not block execution.
            
            You can use Interop.DockWpfWindow() to dock a WPF window inside the parent window.
            or Interop.DockWinFormsPanel() to dock a WinForms panel inside the parent window.
            </param>
        </member>
        <member name="M:SharpSoundDevice.IAudioDevice.CloseEditor">
            <summary>
            Called by the host to instruct the device to close the editor window.
            </summary>
        </member>
        <member name="M:SharpSoundDevice.IAudioDevice.SetProgramData(SharpSoundDevice.Program,System.Int32)">
            <summary>
            Called by the host to set program or bank data.
            This method is also used when the program name is changed. When that happens, the 
            bridge/host sends a Program struct with the new name, along with the same original
            data portion of the current program.
            Note: There's no way to set a "bank" of programs, you must call SetProgramData for each
            program independently
            </summary>
            <param name="program">The program to load</param>
            <param name="index">The index indicating where the program should be loaded</param>
        </member>
        <member name="M:SharpSoundDevice.IAudioDevice.GetProgramData(System.Int32)">
            <summary>
            Called by the host to get program data from the device.
            This method is also used to get program names.
            Note: There's no way to get a "bank" of programs, you must call GetProgramData for each
            program independently.
            </summary>
            <param name="index">the index of the program to return</param>
            <returns></returns>
        </member>
        <member name="M:SharpSoundDevice.IAudioDevice.HostChanged">
            <summary>
            Called by the host when the host environment has changed (sample rate, buffer size, etc..)
            When called, the device should query the host for all properties it needs, via HostInfo.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.IAudioDevice.HostInfo">
            <summary>
            An interface to allow the device to query the host for information. The host sets this
            as a reference to itself.
            See the IHostInfo interface for more info.
            </summary>
        </member>
        <member name="T:SharpSoundDevice.Interop">
            <summary>
            Class containing function used by the VST plugin bridge to create new device
            instances and track running devices.
            
            Not to be used by plugin devices!
            </summary>
        </member>
        <member name="M:SharpSoundDevice.Interop.CreateDevice(System.String,System.String)">
            <summary>
            Load the plugin assembly and instantiates a new instance of the plugin class
            </summary>
            <param name="dllFilename"></param>
            <param name="assemblyFilename"></param>
            <returns></returns>
        </member>
        <member name="M:SharpSoundDevice.Interop.GetID(SharpSoundDevice.IAudioDevice)">
            <summary>
            
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:SharpSoundDevice.Interop.GetDevice(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:SharpSoundDevice.Interop.DeleteDevice(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:SharpSoundDevice.Logging">
            <summary>
            Logging framework for SharpSoundDevice bootstrapping code.
            
            Not to be used by plugin devices!
            </summary>
        </member>
        <member name="M:SharpSoundDevice.Logging.CleanupOldLogs(System.String)">
            <summary>
            Removes log files older than 60 days
            </summary>
            <param name="dir"></param>
        </member>
        <member name="M:SharpSoundDevice.Logging.LogDeviceException(SharpSoundDevice.IAudioDevice,System.Exception)">
            <summary>
            
            </summary>
            <param name="device"></param>
            <param name="e"></param>
        </member>
        <member name="M:SharpSoundDevice.Logging.LogDeviceException(System.Int32,System.Exception)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="e"></param>
        </member>
        <member name="M:SharpSoundDevice.Logging.GetTrace(System.Exception)">
            <summary>
            put all exception details into string
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:SharpSoundDevice.Parameter">
            <summary>
            A class containing parameter info.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.Parameter.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.Parameter.Index">
            <summary>
            The index of the parameter.
            All parameters declared by an IAudioDevice must have a unique index, starting at zero
            </summary>
        </member>
        <member name="P:SharpSoundDevice.Parameter.Steps">
            <summary>
            Indicates resolution / number of steps the parameter has.
            Set to zero for infinite resolution.
            Defined in the VST standard, but unsupported by almost all hosts.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.Parameter.Value">
            <summary>
            The current value of the parameter.
            Must be between 0.0...1.0 (inclusive)
            </summary>
        </member>
        <member name="P:SharpSoundDevice.Parameter.Display">
            <summary>
            The formatted display value of the parameter.
            </summary>
        </member>
        <member name="M:SharpSoundDevice.PluginLoader.LoadPluginAssembly(System.String)">
            <summary>
            Tracks down and loads the actual SharpSoundDevice plugin dll.
            </summary>
            <param name="pluginAssemblyPath"></param>
        </member>
        <member name="M:SharpSoundDevice.PluginLoader.CreatePluginInstance(System.Reflection.Assembly)">
            <summary>
            Creates an instance of the first IAudioDevice class found in the assembly
            </summary>
            <param name="asm"></param>
        </member>
        <member name="T:SharpSoundDevice.Port">
            <summary>
            A class containing port information.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.Port.Name">
            <summary>
            The name of the port.
            </summary>
        </member>
        <member name="P:SharpSoundDevice.Port.Direction">
            <summary>
            The direction of the port (input/output).
            </summary>
        </member>
        <member name="P:SharpSoundDevice.Port.NumberOfChannels">
            <summary>
            The number of channels the port has (1 = mono port, 2 = stereo port, etc...)
            Can range from 1 to 9.
            </summary>
        </member>
        <member name="T:SharpSoundDevice.Program">
            <summary>
            A struct containing program data.
            </summary>
        </member>
        <member name="F:SharpSoundDevice.Program.Name">
            <summary>
            The name of the program
            </summary>
        </member>
        <member name="F:SharpSoundDevice.Program.Data">
            <summary>
            Program data. Format is specified by the device.
            </summary>
        </member>
        <member name="T:SharpSoundDevice.ProgramData">
            <summary>
            A class used by the host / bridge plugin to serialize and deserialize programs and banks in a common format.
            </summary>
        </member>
        <member name="M:SharpSoundDevice.ProgramData.SerializeSingleProgram(SharpSoundDevice.Program)">
            <summary>
            
            </summary>
            <param name="program"></param>
            <returns></returns>
        </member>
        <member name="M:SharpSoundDevice.ProgramData.SerializeBank(SharpSoundDevice.Program[])">
            <summary>
            
            </summary>
            <param name="programs"></param>
            <returns></returns>
        </member>
        <member name="M:SharpSoundDevice.ProgramData.SerializeBank(SharpSoundDevice.IAudioDevice)">
            <summary>
            
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:SharpSoundDevice.ProgramData.DeserializeSingleProgram(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:SharpSoundDevice.ProgramData.DeserializeBank(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:SharpSoundDevice.ProgramData.DeserializeBank(System.Byte[],SharpSoundDevice.IAudioDevice)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="device"></param>
        </member>
        <member name="T:SharpSoundDevice.DeviceUtilities">
            <summary>
            Class containing various helper methods.
            </summary>
        </member>
        <member name="M:SharpSoundDevice.DeviceUtilities.GenerateIntegerId(System.String)">
            <summary>
            Generates a 4-byte integer by hashing an input string and taking modulus.
            Useful to create VST Id that is unique to your plugin
            </summary>
            <param name="seedString">input string, e.g. plugin and developer name</param>
            <returns></returns>
        </member>
        <member name="M:SharpSoundDevice.DeviceUtilities.SerializeParameters(SharpSoundDevice.Parameter[])">
            <summary>
            Accepts an array of Parameters and returns their values in a serialized format.
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:SharpSoundDevice.DeviceUtilities.DeserializeParameters(SharpSoundDevice.Parameter[],System.Byte[])">
            <summary>
            Takes output generated by SerializeParameters(), deserializes it and assigns the values
            to the Parameters
            </summary>
            <param name="parameters">An array of parameters to set with the new values</param>
            <param name="data">Serialized values, as generated by the SerializeParameters() method</param>
        </member>
        <member name="M:SharpSoundDevice.DeviceUtilities.GetManagedSamples(System.IntPtr,System.Int32,System.UInt32)">
            <summary>
            Copies data from double** into managed 2d array
            </summary>
            <param name="ptr"></param>
            <param name="InputPortCount"></param>
            <param name="bufferSize"></param>
            <returns></returns>
        </member>
        <member name="M:SharpSoundDevice.DeviceUtilities.GetEmptyArrays(System.Int32,System.UInt32)">
            <summary>
            Creates an empty 2d managed array
            </summary>
            <param name="InputPortCount"></param>
            <param name="bufferSize"></param>
            <returns></returns>
        </member>
        <member name="M:SharpSoundDevice.DeviceUtilities.CopyToUnmanaged(System.Double[][],System.IntPtr,System.Int32,System.UInt32)">
            <summary>
            Copies data from a managed 2d array into an unmanaged double**
            </summary>
            <param name="outp"></param>
            <param name="ptr"></param>
            <param name="OutputPortCount"></param>
            <param name="bufferSize"></param>
        </member>
        <member name="M:SharpSoundDevice.DeviceUtilities.CopyStringToBuffer(System.String,System.IntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="buffer"></param>
            <param name="maxLen"></param>
        </member>
        <member name="M:SharpSoundDevice.DeviceUtilities.DockWpfWindow(System.Windows.Window,System.IntPtr)">
            <summary>
            Helper method used to dock a Wpf window inside a Vst Window.
            All UI chrome is hidden away (borders, close/minimize/maximize buttons)
            and the window becomes embedded inside the parent window
            </summary>
            <param name="WpfWindow"></param>
            <param name="vstWindow"></param>
        </member>
        <member name="M:SharpSoundDevice.DeviceUtilities.DockWinFormsPanel(System.Windows.Forms.Control,System.IntPtr)">
            <summary>
            Docks a Winforms panel inside the parent window.
            </summary>
            <param name="panel"></param>
            <param name="vstWindow"></param>
        </member>
    </members>
</doc>
